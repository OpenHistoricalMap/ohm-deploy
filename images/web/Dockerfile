FROM ruby:3.3-slim AS builder

ENV DEBIAN_FRONTEND=noninteractive \
    workdir=/var/www \
    BUNDLE_PATH=/usr/local/bundle \
    GEM_HOME=/usr/local/bundle \
    GEM_PATH=/usr/local/bundle \
    PATH="/usr/local/bundle/bin:$PATH" \
    RAILS_ENV=production

WORKDIR $workdir

# Install base build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git curl gnupg build-essential \
    libarchive-dev zlib1g-dev libcurl4-openssl-dev \
    apache2 apache2-dev libapache2-mod-fcgid libapr1-dev libaprutil1-dev \
    postgresql-client libpq-dev libxml2-dev libyaml-dev \
    pngcrush optipng advancecomp pngquant jhead jpegoptim gifsicle libjpeg-progs unzip\
    && curl -fsSL https://deb.nodesource.com/setup_24.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g yarn svgo \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Download OHM Website using gitsha, faster than cloning
ENV OPENHISTORICALMAP_WEBSITE_GITSHA=5bd81461c5dff6858872e8613d74f5efd5b10702
ENV OHM_WEBSITE_URL=https://github.com/OpenHistoricalMap/ohm-website/archive/${OPENHISTORICALMAP_WEBSITE_GITSHA}.zip
RUN rm -rf $workdir/* && curl -fsSL $OHM_WEBSITE_URL -o /tmp/ohm-website.zip && \
    unzip /tmp/ohm-website.zip -d /tmp && \
    mv /tmp/ohm-website-$OPENHISTORICALMAP_WEBSITE_GITSHA/* $workdir && \
    rm -rf /tmp/*

RUN gem install bundler && \
    bundle install && \
    yarn install && \
    bundle exec rake yarn:install

# Dummy config for precompile
RUN cp config/example.database.yml config/database.yml && \
    cp config/example.storage.yml config/storage.yml && \
    touch config/settings.local.yml && \
    chmod 600 config/database.yml

# Create dummy credentials
RUN rm -f config/credentials.yml.enc && \
    export RAILS_MASTER_KEY=$(openssl rand -hex 16) && \
    export SECRET_KEY_BASE=$(bundle exec rails secret) && \
    echo $RAILS_MASTER_KEY > config/master.key && \
    EDITOR="echo" RAILS_MASTER_KEY=$RAILS_MASTER_KEY bundle exec rails credentials:edit && \
    RAILS_MASTER_KEY=$RAILS_MASTER_KEY bundle exec rails runner "\
    require 'active_support/encrypted_configuration'; \
    require 'yaml'; \
    creds = ActiveSupport::EncryptedConfiguration.new(\
        config_path: 'config/credentials.yml.enc', \
        key_path: 'config/master.key', \
        env_key: 'RAILS_MASTER_KEY', \
        raise_if_missing_key: true \
    ); \
    credentials = { secret_key_base: '$SECRET_KEY_BASE' }; \
    creds.write(credentials.to_yaml); \
    puts 'Credentials configured correctly.'"

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
RUN SECRET_KEY_BASE_DUMMY=1  \
    bundle exec i18n export && \
    bundle exec rails assets:precompile

# Leaflet timeslider assets
ENV LEAFLET_OHM_TIMESLIDER_V2=dd0acbdc9432fae6a4d09a17a4848c391e5064f0
RUN git clone https://github.com/OpenHistoricalMap/leaflet-ohm-timeslider-v2.git public/leaflet-ohm-timeslider-v2 && \
    cd public/leaflet-ohm-timeslider-v2 && \
    git checkout $LEAFLET_OHM_TIMESLIDER_V2 && \
    rm -rf .git && \
    cp decimaldate.* $workdir/app/assets/javascripts/ && \
    cp leaflet-ohm-timeslider.* $workdir/app/assets/javascripts/ && \
    cp leaflet-ohm-timeslider.* $workdir/app/assets/stylesheets/ && \
    cp assets/* $workdir/app/assets/images/

FROM ruby:3.3-slim

ENV DEBIAN_FRONTEND=noninteractive \
    workdir=/var/www \
    BUNDLE_PATH=/usr/local/bundle \
    GEM_HOME=/usr/local/bundle \
    GEM_PATH=/usr/local/bundle \
    PATH="/usr/local/bundle/bin:$PATH" \
    RAILS_ENV=production \
    PATH="$PATH:$GEM_HOME/bin"

# Install base dependencies for Passenger gem compilation and runtime
RUN BUILD_DEPS=" \
    build-essential \
    apache2-dev \
    libcurl4-openssl-dev \
    zlib1g-dev \
    libssl-dev \
    npm \
    " \
    && apt-get update && apt-get install -y --no-install-recommends \
    $BUILD_DEPS \
    libgd-dev \
    apache2 \
    libapache2-mod-fcgid \
    libpq5 \
    libxml2 \
    libyaml-0-2 \
    libarchive13 \
    file \
    pngcrush \
    optipng \
    advancecomp \
    pngquant \
    jhead \
    jpegoptim \
    gifsicle \
    postgresql-client \
    curl \
    libvips \
    nodejs \
    \
    && npm install -g svgo \
    \
    # Install Passenger as a gem and compile the Apache module
    \
    && gem install passenger --no-document \
    && yes | passenger-install-apache2-module --auto --languages ruby \
    && passenger-config validate-install --auto \
    \
    # Delete the build dependencies to reduce image size
    \
    && apt-get purge -y --auto-remove $BUILD_DEPS \
    \
    # libgd-dev is requiered by the app on run time to process gps files
    \
    && apt-get update && apt-get install -y --no-install-recommends libgd3 libgd-dev \
    \
    # Final cleanup
    \
    && apt-get clean && rm -rf /var/lib/apt/lists/*


# Apache configuration
COPY config/production.conf /etc/apache2/sites-available/production.conf

RUN passenger-install-apache2-module --snippet > /etc/apache2/mods-available/passenger.load && \
    passenger-config build-native-support

RUN a2enmod headers setenvif proxy proxy_http proxy_fcgi fcgid rewrite lbmethod_byrequests passenger && \
    a2dissite 000-default && \
    a2ensite production && \
    echo "ServerName localhost" >> /etc/apache2/apache2.conf && \
    apache2ctl configtest

RUN echo '#!/bin/bash\nexec /usr/local/bin/ruby --yjit --yjit-exec-mem-size=64 "$@"' > /usr/local/bin/ruby_yjit && \
    chmod +x /usr/local/bin/ruby_yjit
    
WORKDIR $workdir

COPY --chown=www-data:www-data --from=builder /var/www /$workdir
COPY --from=builder /usr/local/bundle /usr/local/bundle

COPY config/settings.yml $workdir/config/
COPY start.sh liveness.sh $workdir/

RUN ln -s /tmp /var/www/tmp

RUN mkdir -p /var/www/log && \
    touch /var/www/log/production.log && \
    chown -R www-data:www-data /var/www/log /var/www/public && \
    chown -R www-data:www-data /var/www

CMD ["./start.sh"]
