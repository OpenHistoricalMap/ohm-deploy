#!/usr/bin/env python

from datetime import datetime, timezone
import subprocess
import tempfile
import os
import sys
import fcntl

from server import ReplicationServer

# expects osmx to be on the PATH.
osmx = 'osmx'

try:
  file = open('/tmp/osmx.lock','w')
  fcntl.lockf(file, fcntl.LOCK_EX | fcntl.LOCK_NB)

  s = ReplicationServer(sys.argv[2])
  print(s.baseurl)
  print("Attributes:", dir(s))
  # OSMX always uses minutely timestamps internally - try integrating daily
  seqnum = subprocess.check_output([osmx,'query',sys.argv[1],'seqnum'])

  if not seqnum.strip():
    timestamp = subprocess.check_output([osmx,'query',sys.argv[1],'timestamp'])
    timestamp = timestamp.decode('utf-8').strip()
    timestamp = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%SZ")
    timestamp = timestamp.replace(tzinfo=timezone.utc)
    print('Timestamp is {0}'.format(timestamp))
    seqnum = s.timestamp_to_sequence(timestamp)

  seqnum = int(seqnum)

  print('Sequence number is {0}'.format(seqnum))

# Primero obtenemos el objeto de estado y VERIFICAMOS que no sea None
  state_info = s.get_state_info()
  
  if state_info is None:
    print("Error: No se pudo obtener el archivo de estado del servidor. Verifique la URL o el estado del servidor.")
    # Salimos del script de forma controlada
    sys.exit(1)
    
  latest = s.get_state_info().sequence
  print("Latest is {0}".format(latest))

  current_id = seqnum + 1
  while current_id <= latest:
    fd, path = tempfile.mkstemp(suffix='.osc.gz')
    with open(fd,'wb') as f:
      f.write(s.get_diff_block(current_id))
    info = s.get_state_info(current_id)
    timestamp = info.timestamp.strftime('%Y-%m-%dT%H:%M:%SZ')
    subprocess.check_call([osmx,'update',sys.argv[1],path,str(current_id),timestamp,'--commit'])
    os.unlink(path)
    current_id = current_id + 1

except BlockingIOError:
  print("Process is running - exiting.")
finally:
  fcntl.lockf(file, fcntl.LOCK_UN)
  file.close()

