services:
  # Tiler db
  db_production:
    container_name: tiler_db_production
    image: ghcr.io/openhistoricalmap/tiler-db:0.0.1-0.dev.git.2166.hc55c4cd
    volumes:
      - tiler_production_pgdata:/var/lib/postgresql/data
      - ./config/postgresql.production.conf:/etc/postgresql/postgresql.conf
    environment:
      - PGDATA=/var/lib/postgresql/data
      - POSTGRES_CONFIG_FILE=/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    ports:
      - "54329:5432"
    env_file:
      - .env.production
    restart: always
    networks:
      - ohm_network
    deploy:
      resources:
        limits:
          cpus: '28.0'
          memory: 55G
          
  # imposm3
  imposm_production:
    container_name: tiler_imposm_production
    image: ghcr.io/openhistoricalmap/tiler-imposm:0.0.1-0.dev.git.3011.he7e605a
    volumes:
      - tiler_production_imposmdata:/mnt/data
    command:
      - sh
      - -c
      - |
        while true; do
          # make sure you disable this for importing the data, for update it shule b eenable
          ./liveness.sh || exit 1
          sleep 60
        done &
        ./start.sh
    env_file:
      - .env.production
    restart: always
    networks:
      - ohm_network


  # Tiler server
  tiler_server_production:
    container_name: tiler_server_production
    image: ghcr.io/openhistoricalmap/tiler-server:0.0.1-0.dev.git.3011.he7e605a
    ports:
      - "9090:9090"
    env_file:
      - .env.production
    restart: always
    networks:
      - ohm_network

  tiler_sqs_cleaner_production:
    container_name: tiler_sqs_cleaner_production
    image: ghcr.io/openhistoricalmap/tiler-cache:0.0.1-0.dev.git.3027.hb928b7e
    env_file:
      - .env.production
    restart: always
    environment:
      - PORT=8000
    command:
      - /bin/sh
      - -c
      - |
        python sqs_processor.py &
        python main.py
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ohm_network

  tiler_s3_cleaner_production:
    container_name: tiler_s3_cleaner_production
    image: ghcr.io/openhistoricalmap/tiler-cache:0.0.1-0.dev.git.3027.hb928b7e
    env_file:
      - .env.production
    networks:
      - ohm_network

  tile_global_seeding_production:
      container_name: tiler_global_seeding_production
      image: ghcr.io/openhistoricalmap/tiler-server:0.0.1-0.dev.git.3011.he7e605a
      env_file:
        - .env.production
      volumes:
        - ./seed.sh:/opt/seed.sh
      entrypoint:
        - /bin/bash
        - "-c"
        - |
          /opt/seed.sh global
      deploy:
        resources:
          limits:
            cpus: '1'
            memory: 1G
      networks:
        - ohm_network

  tile_coverage_seeding_production:
    container_name: tiler_coverage_seeding_production
    image: ghcr.io/openhistoricalmap/tiler-server:0.0.1-0.dev.git.3011.he7e605a
    env_file:
      - .env.production
    volumes:
      - ./seed.sh:/opt/seed.sh
    entrypoint:
      - /bin/bash
      - "-c"
      - |
        /opt/seed.sh coverage
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - ohm_network

  tiler_monitor_production:
    container_name: tiler_monitor_production
    image: ghcr.io/openhistoricalmap/tiler-monitor:0.0.1-0.dev.git.2874.ha9bff68
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../../images/tiler-monitor:/app
      - ../../hetzner:/app/hetzner
    environment:
      - DOCKER_CONFIG_ENVIRONMENT=production
    env_file:
      - .env.production
    stdin_open: true
    tty: true
    networks:
      - ohm_network
      
volumes:
  tiler_production_pgdata:
    driver: local
    name: tiler_db_29_10_2025_staging
  tiler_production_imposmdata:
    driver: local
    name: tiler_imposm_29_10_2025_staging

networks:
  ohm_network:
    external: true
    